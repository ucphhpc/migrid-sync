[CLOUD_MISTY]
# General cloud provider settings and limits
service_name = MISTY
service_title = MISTY-Cloud
service_desc = A misty cloud service
service_provider_flavor = openstack
service_hosts = https://misty:5000/v3
service_max_user_instances = 1
service_max_user_instances_map = john.doe@nosuchplace.org=3
# Semi-colon separated list of img=user login pairs when img and user differs
service_user_map = rocky9=rocky;ubuntu-noble=ubuntu
# Cloud instance defaults
# The general structure is a default option and an optional user override map
# service_flavor_id = INSERT CLOUD FLAVOR ID
# Semi-colon separated list of user=flavor pairs to override for some users
# service_flavor_id_map =
# service_network_id = INSERT CLOUD NETWORK ID
# Semi-colon separated list of user=net pairs to override for some users
# service_network_id_map =
# service_key_id = INSERT DEFAULT KEY ID
# Semi-colon separated list of user=keyid pairs to override for some users
# service_key_id_map =
# service_sec_group_id = INSERT CLOUD SEC GROUP ID
# Semi-colon separated list of user=secgrp pairs to override for some users
# service_sec_group_id_map
# service_floating_network_id = INSERT CLOUD FLOATING NETWORK ID
# Semi-colon separated list of user=floatnet pairs to override for some users
# service_floating_network_id_map =
# service_availability_zone = INSERT CLOUD AVAILABILITY ZONE
# Semi-colon separated list of user=availzone pairs to override for some users
# service_availability_zone_map =
# Optional jump host so that instances are shielded fom direct ssh access
service_jumphost_address = jumpy01
# Semi-colon separated list of user=jumpaddr pairs to override for some users
# service_jumphost_address_map =
service_jumphost_user = misty
# Path to the ssh key used for managing user public keys on cloud jumphost
service_jumphost_key = ~/.ssh/misty-jumphost-key
# Semi-colon separated list of user=jumpuser pairs to override for some users
# service_jumphost_user_map =
# Helper to automatically add user pub keys on jumphost
# The script and coding values are used like this under the hood:
# ssh %(jumphost_user)s@%(jumphost_address)s %(jumphost_manage_keys_script)s add \
#     %(jumphost_manage_keys_coding)s %(encoded_client_id)s %(encoded_pub_keys)s
# where coding is applied to client_id and pub_keys to yield encoded_X versions
service_jumphost_manage_keys_script = manage_misty_keys.py
service_jumphost_manage_keys_coding = base16
