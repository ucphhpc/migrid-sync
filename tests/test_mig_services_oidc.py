from types import SimpleNamespace
import urllib.parse
from urllib.request import urlopen

from tests.support import MigTestCase, testmain
from tests.support.serversupp import make_wrapped_server

from mig.server.createuser import _main as createuser
from mig.services.oidc import _create_service
from mig.shared.useradm import _USERADM_CONFIG_DIR_KEYS


EXAMPLE_CLIENT_OBJECT = SimpleNamespace(
    scopes=['openid'],
    distinguished_name='/C=DK/ST=NA/L=NA/O=Test Org/OU=NA/CN=Test User/emailAddress=user@example.com',
    client_id='user@example.com',
    response_type='code',
    redirect_uri='http://back.to/me',
    authorization_code='__AUTHORIZATION_CODE__',
    token_access=None,
    token_refresh=None,
    token_type=None,
)
EXAMPLE_CLIENT_ID = 'user@example.com'
EXAMPLE_USER_DN = '/C=DK/ST=NA/L=NA/O=Test Org/OU=NA/CN=Test User/emailAddress=user@example.com'


def _clear_userdb_related_state(configuration):
    test_state_path = configuration.state_path

    for config_key in _USERADM_CONFIG_DIR_KEYS:
        dir_path = getattr(configuration, config_key)[0:-1]
        try:
            shutil.rmtree(dir_path)
        except:
            pass


def _ensure_userdb_with_user(configuration):
    args = [
        "Test User",
        "Test Org",
        "NA",
        "DK",
        "user@example.com",
        "This is the create comment",
        "password"
    ]
    print("")  # acount for output generated by the logic
    createuser(configuration, args, default_renew=True)


class TestCase(MigTestCase):
    TEST_USER_DN = '/C=DK/ST=NA/L=NA/O=Test Org/OU=NA/CN=Test User/emailAddress=user@example.com'

    def _provide_configuration(self):
        return 'testconfig'

    def before_each(self):
        _clear_userdb_related_state(self.configuration)
        _ensure_userdb_with_user(self.configuration)

    def test_server_creation_loads_user_db(self):
        server, user_db, x1, x2 = _create_service(self.configuration)

        self.assertIsInstance(user_db, dict)
        self.assertIn(self.TEST_USER_DN, user_db)


if __name__ == '__main__':
    testmain()
