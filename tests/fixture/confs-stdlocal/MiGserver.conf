# MiG server configuration file
[GLOBAL]
# Run server in test mode?
# Server distribution is disabled per default. 
# Set to True to let a set og MiG servers migrate jobs (EXPERIMENTAL!).
#enable_server_dist = False

# Allow users and resources joining without admin action?
# Security is then left to vgrids admission as entities will only have access
# to the default_vgrid when created.
# Auto create MiG users with valid certificate
auto_add_cert_user = False
# Auto create MiG users with authenticated OpenID 2.0 login
auto_add_oid_user = False
# Auto create MiG users with authenticated OpenID Connect login
auto_add_oidc_user = False
# Auto create dedicated MiG resources from valid users
#auto_add_resource = False
# Apply filters to handle illegal characters e.g. in names during auto add
# User ID fields to filter: full_name, organization, ...
# Leave filter fields empty or unset to disable all filters and let input
# validation simply reject user sign up if names contain such characters.
auto_add_filter_fields = 
# How to handle each illegal character in the configured filter fields. The
# default is to skip each such character. Other valid options include hexlify
# to encode each such character with the corresponding hex codepoint.
auto_add_filter_method = skip
# Default account expiry unless set. Renew and web login extends by default.
cert_valid_days = 365
oid_valid_days = 365
oidc_valid_days = 365
generic_valid_days = 365

# Fully qualified domain name of this MiG server
server_fqdn = 

# The Email address for support requests
support_email = 
# The Email addresses of the Administrators of this MiG server
# (comma-separated list with a space following each comma)
admin_email = mig

# The Distinguished Name of the Administrators of this MiG server
# (comma-separated list with optional leading and trailing spaces)
admin_list = 

# Send out notification emails with From pointing to smtp_sender. Useful e.g.
# to set it to a local no-reply address to avoid bounces from stale users and
# invitation (auto-)replies ending up here.
# If left empty the sender defaults to something like testuser@ .
smtp_sender = 

# Base paths
# TODO: tilde in paths is not expanded where configparser is used directly!
state_path = /home/mig/state
certs_path = /home/mig/certs
mig_path = /home/mig/mig

# Code paths
mig_server_home = %(mig_path)s/server/
grid_stdin = %(mig_server_home)s/server.stdin
im_notify_stdin = %(mig_server_home)s/notify.stdin
javabin_home = %(mig_path)s/java-bin/

# State paths
sandbox_home = %(state_path)s/sandbox_home/
jupyter_mount_files_dir = %(state_path)s/jupyter_mount_files/
mrsl_files_dir = %(state_path)s/mrsl_files/
re_files_dir = %(state_path)s/re_files/
re_pending_dir = %(state_path)s/re_pending/
log_dir = %(state_path)s/log/
gridstat_files_dir = %(state_path)s/gridstat_files/
re_home = %(state_path)s/re_home/
resource_home = %(state_path)s/resource_home/
vgrid_home = %(state_path)s/vgrid_home/
vgrid_files_home = %(state_path)s/vgrid_files_home/
vgrid_public_base = %(state_path)s/vgrid_public_base/
vgrid_private_base = %(state_path)s/vgrid_private_base/
resource_pending = %(state_path)s/resource_pending/
user_pending = %(state_path)s/user_pending/
user_home = %(state_path)s/user_home/
user_settings = %(state_path)s/user_settings/
user_db_home = %(state_path)s/user_db_home/
user_cache = %(state_path)s/user_cache/
server_home = %(state_path)s/server_home/
webserver_home = %(state_path)s/webserver_home/
sessid_to_mrsl_link_home = %(state_path)s/sessid_to_mrsl_link_home/
sessid_to_jupyter_mount_link_home = %(state_path)s/sessid_to_jupyter_mount_link_home/
mig_system_files = %(state_path)s/mig_system_files/
mig_system_storage = %(state_path)s/mig_system_storage/
mig_system_run = %(state_path)s/mig_system_run/
wwwpublic = %(state_path)s/wwwpublic/
vm_home = %(state_path)s/vm_home/
freeze_home = %(state_path)s/freeze_home/
freeze_tape = %(state_path)s/freeze_tape/
sharelink_home = %(state_path)s/sharelink_home/
seafile_mount = %(state_path)s/seafile_mount/
openid_store = %(state_path)s/openid_store/
paraview_home = %(state_path)s/paraview_home/
sitestats_home = %(state_path)s/sitestats_home/
events_home = %(state_path)s/events_home/
twofactor_home = %(state_path)s/twofactor_home/
gdp_home = %(state_path)s/gdp_home/
workflows_home = %(state_path)s/workflows_home/
workflows_db_home = %(workflows_home)sworkflows_db_home/
workflows_db = %(workflows_db_home)sworkflows_db.pickle
workflows_db_lock = %(workflows_db_home)sworkflows_db.lock
notify_home = %(state_path)s/notify_home/
quota_home = %(state_path)s/quota_home/

# GDP data categories metadata and helpers json file
gdp_data_categories = %(gdp_home)s/data_categories.json

# GDP ID helper to scramble IDs in gdp.log 
# Supported values include safe_encrypt, safe_hash, simple_hash and false with
# safe_hash being the default SHA256 hash, simple_hash the classic MD5 hash,
# safe_encrypt the Fernet encrypt using CRYPTO_SALT and false leaving the IDs
# untouched. The corresponding underlying algorithm names md5, sha256 and
# fernet can also be used instead of the above.
gdp_id_scramble = safe_hash
# GDP path helper to scramble possibly sensitive path names in gdp.log 
# Supported values include safe_encrypt, safe_hash, simple_hash and false with
# safe_hash being the SHA256 hash, simple_hash the classic MD5 hash, 
# safe_encrypt the default Fernet encrypt using CRYPTO_SALT and false leaving
# the paths untouched. The corresponding underlying algorithm names md5, sha256
# and fernet can also be used instead of the above.
gdp_path_scramble = safe_encrypt

# For write-restricted VGrid shared folders
# The readonly dir MUST be a 'ro' (possibly bind) mounted version of the
# writable dir for this to work. Write-restricted VGrid support will remain
# disabled unless these are both set and adhere to those requirements. 
vgrid_files_readonly = %(state_path)s/vgrid_files_readonly/
vgrid_files_writable = %(state_path)s/vgrid_files_writable/

# VGrid state files
vgrid_owners = owners
vgrid_members = members
vgrid_resources = resources
vgrid_triggers = triggers
vgrid_settings = settings
vgrid_sharelinks = sharelinks
vgrid_imagesettings = imagesettings
vgrid_monitor = monitor

# Optional shared ssh public key presented to resource owners
public_key_file = ~/.ssh/id_rsa.pub

# x.509 certificate and key used for interserver communication
server_cert = %(certs_path)s/MiGservercert.pem
server_key = %(certs_path)s/MiGserverkey.pem
ca_cert = %(certs_path)s/cacert.pem
sss_home = %(state_path)s/sss_home/

# URLs
migserver_public_url = 
migserver_public_alias_url = 
migserver_http_url = 
migserver_https_url = 
migserver_https_mig_cert_url = 
migserver_https_ext_cert_url = 
migserver_https_mig_oid_url = 
migserver_https_ext_oid_url = 
migserver_https_mig_oidc_url = 
migserver_https_ext_oidc_url = 
migserver_https_sid_url = 

# unique id of the MiG server
mig_server_id = %(server_fqdn)s.0
empty_job_name = no_grid_jobs_in_grid_scheduler
notify_protocols = email
smtp_server = localhost
gdp_email_notify = False

# Optional extra service interfaces with common structure
# * user_X_address is the host address to listen on
# * user_X_port is the host port to listen on
# * user_X_key is the host RSA key used for TLS/SSL securing connections
# * user_X_auth is the allowed user auth methods (e.g. publickey or password)
# * user_X_alias is user field(s) from user DB to allow as alias username
# * user_X_show_address is the host address to advertise on Setup page
# * user_X_show_port is the host port to advertise on Setup page
#
# NOTE: either use only one of grid_sftp and sftp_subsys or set them up on 
#       separate address+port combination.
# grid_sftp settings - standalone python sftp service
# empty address means listen on all interfaces
user_sftp_address = 
user_sftp_port = 2222
# file with concatenated private key and public certificate for sftp server
user_sftp_key = 
# file with ssh public host key matching the private key from above
user_sftp_key_pub = 
# Optional ssh key fingerprint(s) of the key above for clients to verify.
# They can typically be extracted from the command:
# ssh-keygen -l -f %(user_sftp_key_pub)s .
user_sftp_key_md5 = 
user_sftp_key_sha256 = 
# Optional ssh host key fingerprint verification from SSHFP record in DNS.
user_sftp_key_from_dns = False
# space separated list of sftp user authentication methods 
# (default: publickey password)
#user_sftp_auth = publickey password
user_sftp_alias = 
# Tuned packet sizes - window size 16M and max packet size 512K (default)
# Paramiko comes with default window size 2M and max packet size 32K
#user_sftp_window_size = 16777216
#user_sftp_max_packet_size = 524288
# Number of concurrent sftp logins per-user. Useful if they get too taxing.
# A negative value means the limit is disabled (default).
user_sftp_max_sessions = -1
# sftp_subsys settings - optimized openssh+subsys sftp service
# empty address means listen on all interfaces
user_sftp_subsys_address = 
user_sftp_subsys_port = 22
# If active sftp is exposed on another address/port (e.g. with port forward for
# firewall-friendly access) it can be set here for display on Setup page.
# If both sftp and sftpsubsys are enabled the preferred one may be exposed here.
#user_sftp_show_address = 
#user_sftp_show_port = 
# grid_webdavs settings
# empty address means listen on all interfaces
user_davs_address = 
user_davs_port = 4443
# file with concatenated private key and public certificate for davs server
user_davs_key = 
# Optional davs key fingerprint(s) of the key above for clients to verify.
# They can typically be extracted from the command:
# openssl x509 -noout -fingerprint -sha256 -in %(user_davs_key)s .
user_davs_key_sha256 = 
# space separated list of davs user authentication methods (default: password)
# priority from order and allowed values are password (basic auth) and digest
# IMPORTANT: digest auth breaks 2GB+ uploads from win 7 (OverflowError)
#user_davs_auth = password
user_davs_alias = 
# If davs is exposed on another address/port (e.g. with port forward for
# firewall-friendly access) it can be set here for display on Setup page.
#user_davs_show_address = 
#user_davs_show_port = 
# grid_ftps settings
# empty address means listen on all interfaces
user_ftps_address = 
user_ftps_ctrl_port = 8021
user_ftps_pasv_ports = 8100:8400
# file with concatenated private key and public certificate for ftps server
user_ftps_key = 
# Optional ftps key fingerprint(s) of the key above for clients to verify.
# They can typically be extracted from the command:
# openssl x509 -noout -fingerprint -sha256 -in %(user_ftps_key)s .
user_ftps_key_sha256 = 
# space separated list of ftps user authentication methods (default: password)
#user_ftps_auth = password
user_ftps_alias = 
# If ftps is exposed on another address/port (e.g. with port forward for
# firewall-friendly access) it can be set here for display on Setup page.
#user_ftps_show_address = 
#user_ftps_show_ctrl_port = 
# file with concatenated private key and public certificate for vmproxy server
user_vmproxy_key = 
# file with diffie-hellman parameters for strong SSL/TLS, shared by IO daemons
user_shared_dhparams = 
# seafile integration settings
# where seafile web hub is located (defaults to /seafile on same address)
user_seahub_url = /seafile
# where seafile clients should connect (defaults to seafile on SID address)
user_seafile_url = https:///seafile
# space separated list of seafile user authentication methods (default: password)
#user_seafile_auth = password
user_seafile_alias = 
# if seafile instance runs locally rather than stand-alone (default: False)
user_seafile_local_instance = False
# if local read-only mount is available for user home integration (default: False)
user_seafile_ro_access = True
# Priority list of protocols allowed in Duplicati backups (sftp, ftps, davs)
user_duplicati_protocols = 
# Cloud settings for remote access - more in individual service sections
# space separated list of cloud user authentication methods 
# (default: publickey)
#user_cloud_ssh_auth = publickey
user_cloud_alias = 
# IM notify helper setup - keep any login here secret to avoid abuse
user_imnotify_address = 
user_imnotify_port = 6667
user_imnotify_channel = 
user_imnotify_username = 
user_imnotify_password = 
# grid_openid settings for optional OpenID provider from MiG user DB
# empty address means listen on all interfaces
# NOTE: by default we listen on private high port and optionally proxy in vhost
user_openid_address = 
user_openid_port = 8443
# If openid is exposed on another address/port (e.g. with port forward for 
# firewall-friendly access or vhost proxy) it can be set here for automatic
# masquerading inside the openid daemon. For most setups it makes sense to
# uncomment the next two and specify a mig_oid_provider URL
# with  in it rather than the actual backend on provided
#  address.
# Generated apache conf automatically includes proxy to support that:
# https:///openid/
#  ->
# https://:8443/openid/
#user_openid_show_address = 
#user_openid_show_port = 
# file with concatenated private key and public certificate for openid server
user_openid_key = 
# space separated list of openid user authentication methods (default: password)
#user_openid_auth = password
user_openid_alias = 
# Should local OpenID enforce MiG-users.db account expire? (Default: True)
#user_openid_enforce_expire = True

# Optional internal/external OpenID 2.0 identity provider(s) - leave empty
# to disable OpenID 2.0 access or enable the local openid service and point it
#  there to allow username/password logins for the web interfaces. Typically
# with a value like 
#   https://%(mig_oid_fqdn)s:%(mig_oid_port)d/openid/id/
# or with the previously mentioned automatic proxy setup
#   https:///openid/id/
# It is possible to have users login using the credentials they registered in
# the local MiG-users.db
user_mig_oid_title = MiG
user_mig_oid_provider = 
# Optional OpenID provider alias to same account in dual-head setups.
# When set account signup will result in a htaccess file with BOTH mig and alt
# OpenID provider in allowed IDs, so that signup through one head doesn't
# remove cert_redirect access through the other.
#user_mig_oid_provider_alias = 
user_ext_oid_title = External
user_ext_oid_provider = 
user_openid_providers = 

# Optional internal/external OpenID Connect identity provider(s) - leave empty
# to disable openid connect access. Values should be the server meta URL here.
#user_mig_oidc_title = MiG
#user_mig_oidc_provider = 
user_ext_oidc_title = External
user_ext_oidc_provider = 
user_openidconnect_providers = 
# OpenID Connect provider provides issuer and audience as part of the ID claim.
# We use those fields and crypto signature to check authenticity of claims.
#user_mig_oidc_issuer = 
#user_mig_oidc_audience = 1234abcd-12ab-34cd-ef56-ghijklmn7890
user_ext_oidc_issuer = 
user_ext_oidc_audience = 

#user_mig_cert_title = MiG
#user_ext_cert_title = Other

logfile = mig.log
loglevel = info
peerfile = MiGpeers.conf
sleep_period_for_empty_jobs = 120
cputime_for_empty_jobs = 180
min_seconds_between_live_update_requests = 60

# Please note that order *does* matter for these lists! 
# First entry is default for resource creation cgi
architectures = X86 AMD64 IA64 SPARC SPARC64 ITANIUM SUN4U SPARC-T1 SPARC-T2 PS3 CELL
scriptlanguages = sh python java
jobtypes = batch interactive all
lrmstypes = Native Native-execution-leader Batch Batch-execution-leader

# Jupyter integration sections
### E.g. ###
# [JUPYTER_DAG]
# service_name=dag
# service_desc=This is an awesome service
# service_hosts=https://192.168.1.10 https://hub002.com http://hub003.com
###
# During install.py the individual sections will be generated 
# in accordance with the jupyter_services parameter content
# For each section a apache proxy balancer config is generated,
# which will setup the target url location.
# In the example provided, the system will generate a location called /dag
# as defined by the 'service_name' in the /etc/httpd/conf.extras.d/MiG-jupyter-def.conf file


# Cloud integration sections
### E.g. ###
# [CLOUD_MIST]
# General cloud provider settings and limits
# service_name=MIST
# service_desc=This is an awesome service
# service_provider_flavor = openstack
# service_hosts = REST API URL
# service_max_user_instances = 16
# Semi-colon separated list of img=user login pairs when img and user differs
# service_user_map = centos7=centos;centos8=centos;ubuntu-xenial=ubuntu
# Cloud instance defaults
# The general structure is a default option and an optional user override map
# service_flavor_id = INSERT CLOUD FLAVOR ID
# Semi-colon separated list of user=flavor pairs to override for some users
# service_flavor_id_map = 
# service_network_id = INSERT CLOUD NETWORK ID
# Semi-colon separated list of user=net pairs to override for some users
# service_network_id_map = 
# service_key_id = INSERT DEFAULT KEY ID
# Semi-colon separated list of user=keyid pairs to override for some users
# service_key_id_map =
# service_sec_group_id = INSERT CLOUD SEC GROUP ID
# Semi-colon separated list of user=secgrp pairs to override for some users
# service_sec_group_id_map
# service_floating_network_id = INSERT CLOUD FLOATING NETWORK ID
# Semi-colon separated list of user=floatnet pairs to override for some users
# service_floating_network_id_map =
# service_availability_zone = INSERT CLOUD AVAILABILITY ZONE
# Semi-colon separated list of user=availzone pairs to override for some users
# service_availability_zone_map =
# Optional jump host so that instances are shielded fom direct ssh access
# service_jumphost_address =
# Semi-colon separated list of user=jumpaddr pairs to override for some users
# service_jumphost_address_map =
# service_jumphost_user = mist
# Semi-colon separated list of user=jumpuser pairs to override for some users
# service_jumphost_user_map =
# Helper to automatically add user pub keys on jumphost
# The script and coding values are used like this under the hood:
# ssh %(jumphost_user)s@%(jumphost_address)s %(jumphost_manage_keys_script)s add \
#     %(jumphost_manage_keys_coding)s %(encoded_client_id)s %(encoded_pub_keys)s
# where coding is applied to client_id and pub_keys to yield encoded_X versions  
# service_jumphost_manage_keys_script = manage_mist_keys.py
# service_jumphost_manage_keys_coding = base16
###
# During install.py the individual sections will be generated 
# in accordance with the cloud_services parameter content



[SCHEDULER]
# Scheduling algorithm to use
# Currently supported: FIFO, FirstFit, BestFit, FairFit, Random and MaxThroughput
algorithm = FairFit
#
# How long to keep jobs that can not be scheduled in the queue.
# Jobs that stay 'expire_after' seconds in the queue can be expired by
# the scheduler. Setting expire_after to 0 disables expiry.
# 1 day: 86400 seconds
# 7 days: 604800 seconds
# 90 days: 7776000 seconds
# 1 year: 31536000 seconds
# 2 year: 63072000 seconds
expire_after = 31536000

job_retries = 2

[MONITOR]
sleep_secs = 120
sleep_update_totals = 600
slackperiod = 600

[WORKFLOWS]
# Workflow specific settings
# Directory paths relative to an individual vgrid
vgrid_patterns_home = .workflow_patterns_home/
vgrid_recipes_home = .workflow_recipes_home/
vgrid_tasks_home = .workflow_tasks_home/

[SETTINGS]
language = English
submitui = fields textarea files

[SCM]
hg_path = 
hgweb_scripts = 

[TRACKER]
trac_admin_path = 
# Note: We can't use mig_server_home from GLOBAL section here
trac_ini_path = 
# IMPORTANT: Keep trac_id_field in sync with apache trac login section
#trac_id_field = email

[RESOURCES]
default_mount_re = SSHFS-2.X-1

[VMACHINES]
# Virtual machine integration
#default_os = ubuntu-12.04
#default_flavor = basic
#default_diskformat = vmdk
#default_hypervisor = vbox4x
#default_hypervisor_re = VIRTUALBOX-4.X-1
#default_sys_re = VBOX4.X-IMAGES-2012-1
# Use system images from runtime env provided location
#default_sys_base = $VBOXIMGDIR
# Use user local system images from runtime env provided location
#default_user_conf = $VBOXUSERCONF
# Space separated list of os versions (system images) available locally or on
# resources. The official os image packs typically include one os version in 
# various package flavors but multiple packs can be installed and more can be
# built with our vmbuilder tools in vms_builder_home.
#extra_os = 
# Space separated list of VM flavors (system images) available locally or on
# resources. The official os image packs include some and more can be built
# with our vmbuilder tools in vms_builder_home.
#extra_flavors = 
# Space separated list of VM hypervisor runtime envs available on resources. 
# The official os image packs have matching envs available but additional ones
# can be added to cover e.g. custom images built with our vmbuilder tools in
# vms_builder_home.
#extra_hypervisor_re =
# Space separated list of VM image pack runtime envs (system images) available
# on resources. The official os image packs have matching envs available but
# additional ones can be added to cover e.g. custom images built with our
# vmbuilder tools in vms_builder_home.
#extra_sys_re =

[QUOTA]
backend = lustre
user_limit = 1099511627776
vgrid_limit = 1099511627776

[SITE]
# Web site appearance
# Whether to use Python 3 for all Python invocations
prefer_python3 = False
# Dynamic entry page to pick user default with fallback to site landing page
autolaunch_page = /wsgi-bin/autolaunch.py
# Entry page if not explictly provided or overriden by user
landing_page = /wsgi-bin/home.py
# Skin to style all pages with (taken from mig/images/skin/NAME)
skin = migrid-basic
# Which skin to style pages without theme with
static_css = /images/skin/migrid-basic/core.css
# Optional space separated list of extra javascripts to inject on user pages
extra_userpage_scripts = 
# Optional space separated list of extra stylesheets to inject on user pages
extra_userpage_styles = 
# Selectable base menus (simple, default or advanced to match X_menu options below)
base_menu = default
# Default sorted menu items to include
#valid menu items are: home dashboard submitjob files jobs vgrids resources downloads runtimeenvs archives settings shell wshell statistics docs people migadmin vmachines transfers sharelinks crontab seafile jupyter peers logout close
default_menu = home files submitjob jobs vgrids resources runtimeenvs people settings downloads transfers sharelinks crontab docs logout
#simple_menu = home files vgrids settings logout
#advanced_menu = home files submitjob jobs vgrids resources runtimeenvs people settings downloads archives transfers sharelinks crontab vmachines shell docs logout
# Additional sorted user selectable menu entries
user_menu = 
# Selectable VGrid component links (default or advanced to match X_vgrid_links options below)
collaboration_links = default advanced
# VGrid component visibility and order - automatically tries auto detection if not set.
default_vgrid_links = files web
advanced_vgrid_links = files web scm tracker workflows monitor
# VGrid label allows setting another name to use instead of VGrid
vgrid_label = VGrid
#script_deps = jquery.js jquery.contextmenu.js jquery.contextmenu.css jquery.form.js jquery.prettyprint.js jquery.tablesorter.js jquery.tablesorter.pager.js jquery-ui.js jquery-ui.css jquery-ui-theme.css jquery-ui-theme.custom.css jquery.calendar-widget.js jquery.calculator.js jquery.calculator.css jquery.countdown.js jquery.countdown.css jquery.zrssfeed.js jquery.zrssfeed.css jquery.epiclock.js jquery.epiclock.css jquery.zweatherfeed.js jquery.zweatherfeed.css jquery.jgcharts.js jquery.sparkline.js jquery.form.wizard.js
#default_css = /images/default.css
fav_icon = /images/skin/migrid-basic/favicon.ico
title = Minimum intrusion Grid
short_title = MiG
# Optional external help url e.g. used as Help in the V3 user menu
external_doc = https://sourceforge.net/p/migrid/wiki
# Enable web-based site administration for admin_list users
enable_migadmin = False
# Further restrictions for admin_list users to view and act through migadmin
# where the default is ANY for no extra restrictions and a space separated list
# of the allowed values (cert, oid and oidc) can be given to limit to those.
#migadmin_view_access = ANY
#migadmin_act_access = ANY
# Enable strict access control and logs for compliance with the General Data
# Protection Regulation (GDPR) imposed by the EU. You probably want this if
# and only if your users need to store sensitive/personal data. More info at
# https://en.wikipedia.org/wiki/General_Data_Protection_Regulation 
enable_gdp = False
# Enable user job execution on any associated compute resources
enable_jobs = False
# Enable execution and storage resources for vgrids
enable_resources = False
# Enable that workflows are available
enable_workflows = False
# Enable vgrid workflow triggers for file system events
enable_events = False
# Enable efficient I/O daemons - sftp, ftps and webdavs
# Pure Python Paramiko-based sftp daemon
enable_sftp = False
# OpenSSH sftp daemon with just the Paramiko fs layer as subsys handler
enable_sftp_subsys = False
# Pure Python WsgiDAV-based webdav(s) daemon
enable_davs = False
# Allow sub-optimal but still relatively strong legacy TLS support in WebDAVS
# NOTE: Python-2.7.x ssl supports TLSv1.2+ with strong ciphers and all popular
#       clients (including Windows 10+ native WebDAVS) also work with those.
# NOTE: Apparently Win 7 (+8.1?) native WebDAVS only works with semi-strong
#       legacy ciphers and TLSv1.0+v1.1 unless updated and enabled 
# NOTE: Win 7 went EoL in January 2020 and should no longer be needed
#enable_davs_legacy_tls = False
# Pure Python pyftpdlib-based ftp(s) daemon
enable_ftps = False
# Allow sub-optimal but still relatively strong legacy TLS supports in FTPS
# NOTE: Recent PyOpenSSL supports TLSv1.2+ with strong ciphers and all popular
#       clients also work with those.
# NOTE: CentOS 7 native pyOpenSSL 0.13 does NOT support elliptic curve ciphers
#       and FileZilla fails on listdir with remaining strong DHE ciphers.
#       Installing a recent pyopenssl e.g. from the centos-openstack-X repo
#       allows disabling legacy tls support without breaking FileZilla support.
# TODO: disable as soon as a recent pyopenssl version is available - the one
#       from pip breaks paramiko so do NOT go there.
enable_ftps_legacy_tls = True
# Enable WSGI served web pages (faster than CGI) - requires apache wsgi module
enable_wsgi = True
# Enable system notify helper used e.g. to warn about failed user logins
enable_notify = False
# Enable IM notify helper - additionally requires configuration above
enable_imnotify = False
# Enable users to schedule tasks with a cron/at-like interface
enable_crontab = True
# Enable 2FA for web access and IO services with any TOTP authenticator client
# IMPORTANT: Do NOT change this option manually here (requires Apache changes)!
#       use generateconfs.py --enable_twofactor=True|False
enable_twofactor = True
# Always require twofactor authentication for one or more protocols.
twofactor_mandatory_protos = 
# Require logins to come from already active 2FA session IP address
# if user has enabled 2FA for them.
# IMPORTANT: Do NOT change this option manually here (requires Apache changes)!
#            use generateconfs.py --enable_twofactor_strict_address=True|False
twofactor_strict_address = False
# Which 2FA authenticator apps to mention on setup wizard. A space-separated
# list of names from: bitwarden, freeotp, google, microfocus, microsoft, yubico
twofactor_auth_apps = 
# Enable Peers system for site-local users to vouch for external users
enable_peers = False
# Whether external user requests must explicitly specify their sponsor (Peers)
peers_mandatory = False
# Explicit fields to request on external user sign up forms (full_name, email)
peers_explicit_fields = 
# Short description of whom to point to as contact(s) in the Peers system
peers_contact_hint = employed here and authorized to invite external users
# Enable OpenID daemon for web access with user/pw from local user DB
enable_openid = False
# Enable share links for easy external exchange of data with anyone
enable_sharelinks = True
# Enable storage quota
enable_quota = False
# Enable background data transfers daemon - requires lftp and rsync
enable_transfers = False
# Explicit background transfer source addresses for use in pub key restrictions
# It may be necessary to set it to match the FQDN of the default outgoing NIC
transfers_from =       
# Custom per-user overall transfer log location for shared fs sites
#transfer_log = transfer.log
# Enable freeze archive handlers - support for write-once archiving of files
# for e.g. the data associated with a research paper.
enable_freeze = True
# Which frozen archive flavors can be deleted (True for all, False or empty for
# none and a space-separated list of flavors for individual control.
#permanent_freeze = 
# Delay before frozen archives are expected to hit tape (e.g. 5m, 4d or 2w).
# Leave unset or empty if no tape archiving is available.
freeze_to_tape = 
# Enable image preview support in file manager - requires rendering resources
enable_preview = False
# Enable one-click resource sandboxes - requires users with (e.g. browser) Java
enable_sandboxes = False
# Enable virtual machine integration handlers - still only visible if added in
# either default or user menu above. Requires vm hypervisor resources.
enable_vmachines = False
# Enable Jupyter integration - requires a remote Jupyter server configured to
# allow our users to connect and then integrates mount of user home there
enable_jupyter = False
# Enable cloud integration - requires a remote OpenStack server configured to
# allow our users to connect and then integrates mount of user home there
enable_cloud = False
# Enable Seafile synchronization service - requires local Seafile install
enable_seafile = False
# Enable Duplicati user computer backup integration
enable_duplicati = False
# Enable gravatar.com integration for user profile avatars
enable_gravatars = False
# Enable dynamic site status integration particularly in UI V3
enable_sitestatus = True
# Where to find json-formatted list of site events for dynamic site status
# NOTE: either create this file or symlink to the included one.
#status_events = /public/status-events.json
# Include status events with system set to one of these (ANY disables filter)
status_system_match = ANY
# Enable legacy grid.dk features
#enable_griddk = False
# Whether to enforce automatic IO protocol access expiry after weeks of web
# inactivity. When enabled users have to do a web log in once in a while to
# preserve full SFTP, WebDAVS and FTPS service access.
io_account_expire = False
# User interfaces for users to select with first as default (allowed: V2, V3)
user_interface = V3 V2
# For gradual transition to new user interface set default here for new users
#new_user_default_ui = 
# Security scanners to let scan e.g. for common logins without notify on errors
security_scanners = UNSET
# Cross Site Request Forgery protection level (MINIMAL, WARN, MEDIUM or FULL).
# Where MINIMAL only requires a POST on changes, FULL additionally requires
# CSRF tokens for all such operations, and MEDIUM likewise requires CSRF tokens
# but with the exception that legacy user script and xmlrpc clients are allowed
# access without. The default will likely change to FULL in the future when all
# clients are ready. The transitional WARN mode basically enforces MINIMAL but
# checks and logs all CSRF failures like FULL.
csrf_protection = MEDIUM
# Password strength policy (NONE, WEAK, MEDIUM, HIGH, MODERN:L or CUSTOM:L:C)
# for all password-enabled services, e.g. sftp, webdavs, ftps and openid.
# Where NONE is the legacy behavior of no explicit length or character class
# checks - except safeinput min len and optionally any cracklib requirements
# if enabled. The other plain names require increasing strength in terms of
# length and number of different character classes included. MODERN:L leaves
# the outdated focus on character classes behind and only requires longer
# passwords of any L characters, and recommends multi-factor auth and cracklib
# enforcement for added security. The CUSTOM:L:C version offers complete
# control over the required length (L) and number of character classes (C).
password_policy = MEDIUM
# Since the password_policy is used both in password selection and during
# actual log in, it may be necessary to allow old passwords ONLY for log in
# until all passwords have been changed to fit a new policy.
# The optional password_legacy_policy can be set to the old policy for that 
# purpose, and otherwise defaults to disabled.
password_legacy_policy = 
# Optional additional guard against simple passwords with the cracklib library
password_cracklib = False
# Optional limit on users who may invite peers as site users. Space separated
# list of user field and regexp-filter pattern pairs separated by colons.
peers_permit = distinguished_name:.*
# Optional html banner on Peers page to inform e.g. about access restrictions
#peers_notice = 
# Optional limit on users who can create vgrids. Space separated list of user
# field and regexp-filter pattern pairs separated by colons.
vgrid_creators = distinguished_name:.*
# Optional limit on users who can manage vgrids. Space separated list of user
# field and regexp-filter pattern pairs separated by colons.
vgrid_managers = distinguished_name:.*
# Space separated list of methods to include on the signup page: default is 
# extcert only and order is used on the signup page 
signup_methods = extcert
# Space separated list of methods to include on the login page: default is same
# as signup_methods and order is used on login page and various other pages
# presenting the users with one or more possible https urls. 
login_methods = extcert
# Extra note displayed during sign up
#signup_hint = 
# Digest authentication hex salt for scrambling saved digest credentials
# IMPORTANT: digest credentials need to be saved again if this is changed
# Can be a plain string, a path to a file or an environment value and the
# content must be a string of e.g. 32 hex characters. If two FILE values are
# given the value is read from the 2nd (cache) file if available and read from
# first (persistent) file path and saved to cache path otherwise. Useful e.g.
# with a tmpfs cache.
#digest_salt = 084528A93A4E0A40905609A729394F5C
#digest_salt = FILE::/path/to/digest-salt.hex
#digest_salt = FILE::/path/to/persistent-digest-salt.hex$$/path/to/cached-digest-salt.hex
#digest_salt = ENV::DIGEST_SALT
digest_salt = 000000000000000_TEST_DIGEST_SALT
# Optional crypto helper salt used to protect data stored on disk or in logs
# Can be a plain string, a path to a file or an environment value and the
# content must be a string of e.g. 32 hex characters. If two FILE values are
# given the value is read from the 2nd (cache) file if available and read from
# first (persistent) file path and saved to cache path otherwise. Useful e.g.
# with a tmpfs cache.
#crypto_salt = 280845A93A4E0A40905609A7294F5C39
#crypto_salt = FILE::/path/to/crypto-salt.hex
#crypto_salt = FILE::/path/to/persistent-crypto-salt.hex$$/path/to/cached-crypto-salt.hex
#crypto_salt = ENV::CRYPTO_SALT
crypto_salt = 000000000000000_TEST_CRYPTO_SALT
# Optional software catalogue from grid.dk
#swrepo_url = /software-repository/
# Use left logo from skin and default center text for top banner
logo_left = /images/skin/migrid-basic/logo-left.png
logo_center = MiG
# Uncomment to also enable right logo from skin in top banner
logo_right = /images/skin/migrid-basic/logo-right.png
#support_text = <a href="">Support & Questions</a>
#privacy_text =
#credits_text = 2003-2023, <a href="https://www.migrid.org">The MiG Project</a>
#credits_image = /images/copyright.png
# Optional data safety notice and popup on Files page
#datasafety_link = 
#datasafety_text =
