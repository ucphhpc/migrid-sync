#!/bin/bash
#
# run verifyarchives as mig user
#
# NOTE: some kind of manual or automated operator procedure to actually extract
# information about new archives to send to tape is required for this to have
# any effect. Basically the ready-finalized-YYYYMMDD.txt files in archivestaging
# must be filled with root paths of pending archives to check.

# Force bash to handle uninitialized variables and errors
# https://vaneyckt.io/posts/safer_bash_scripts_with_set_euxo_pipefail/
# NOTE: 'set -eE' exits on failure, good for debug but we want to handle errors
#set -eEuo pipefail
set -uo pipefail

# The target maximum delay before archives hit tape - empty means no tape archiving
tapedeadline=""

if [ -z "$tapedeadline" ]; then
    #echo "DEBUG: No tape archiving on this site: ${tapedeadline}"
    exit 0
fi

# Where to look up pending archive checks
archivestaging="/home/mig/state/freeze_tape/staging"

if [ ! -d "$archivestaging" ]; then
    echo "ERROR: No such archive staging directory: $archivestaging"
    exit 42
fi

# Monthly long range search for pending finalized files, otherwise only look for today
today=$(date +%Y%m%d)
day_of_month=$(date +%d)
hour_of_day=$(date +%H)
if [ "${day_of_month}" -eq "01" -a "${hour_of_day}" = "01" ]; then
    marker_pattern='.*/ready-finalized-[0-9]+.txt'
    maxdays=90
else
    marker_pattern=".*/ready-finalized-${today}.txt"
    maxdays=1
fi 

totalcount=0
totalfailed=0
#echo "DEBUG: searching for $marker_pattern files in: $archivestaging"
for archivelist in $(/bin/find "$archivestaging" -type f -regex "$marker_pattern" -mtime -${maxdays}); do
    #echo "DEBUG: inspecting: $archivelist"
    passedlist="${archivelist/-finalized-/-finalized-and-verified-}"
    failedlist="${archivelist/-finalized-/-finalized-but-failed-verify-}"
    # Temporary working helpers
    tmppassedlist="${passedlist}.working"
    tmpfailedlist="${failedlist}.working"
    if [ ! -s "$archivelist" ]; then
        #echo "DEBUG: Nothing to verify for $archivelist"
        continue
    fi
    if [ -e "$passedlist" ]; then
        #echo "DEBUG: skip verify for previously handled $archivelist"
        continue
    fi
    echo "INFO: Verifying archives in $archivelist"
    touch $tmppassedlist $tmpfailedlist
    verifycount=0
    verifyfailed=0
    IFS=$'\n'
    for archpath in $(cat $archivelist); do
        verifycount=$((verifycount+1))
        email=$(echo "$archpath" | sed 's@.*emailAddress=\([^/]*\)\/archive-.*@\1@g')
        archname=$(echo "$archpath"|sed 's@.*\/\(archive-.*\)@\1@g')
        su - mig -c "PYTHONPATH=/home/mig mig/server/verifyarchives.py -A $(date +%s -d 'a month ago') -I \"*${email}*\" -n \"$archname\""
        checkfailed=$?
        if [ $checkfailed -eq 0 ]; then
            echo "$archpath" >> "$tmppassedlist"
        else
            verifyfailed=$((verifyfailed+checkfailed))
            echo "$archpath" >> "$tmpfailedlist"
        fi
    done
    mv "$tmppassedlist" "$passedlist"
    mv "$tmpfailedlist" "$failedlist"
    echo "INFO: Checked $verifycount archives from $archivelist with $verifyfailed failure(s)"
    if [ $verifycount -gt $verifyfailed ]; then
        echo "INFO: Archives that passed verification are listed in $passedlist"
    fi
    if [ $verifyfailed -gt 0 ]; then
        echo "INFO: Archives that failed verification are listed in $failedlist"
    fi
    totalcount=$((totalcount+verifycount))
    totalfailed=$((totalfailed+verifyfailed))
done

exit $totalfailed
