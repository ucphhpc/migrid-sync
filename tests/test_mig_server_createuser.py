# -*- coding: utf-8 -*-
#
# --- BEGIN_HEADER ---
#
# test_mig_server-createuser - unit tests for the migrid createuser CLI
# Copyright (C) 2003-2024  The MiG Project by the Science HPC Center at UCPH
#
# This file is part of MiG.
#
# MiG is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# MiG is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301,
# USA.
#
# --- END_HEADER ---
#

"""Unit tests for the migrid createuser CLI"""

from __future__ import print_function
import errno
import os
import shutil
import sys

from tests.support import PY2, MIG_BASE, TEST_OUTPUT_DIR, MigTestCase, testmain
from tests.support.picklesupp import PickleAssertMixin

from mig.shared.arguments import ArgumentBundle
from mig.server.createuser import _main as createuser, \
    main as createuser_main, _BUNDLE_DEFINITION
from mig.shared.useradm import _USERADM_CONFIG_DIR_KEYS


class TestMigServerCreateuser(MigTestCase, PickleAssertMixin):
    def before_each(self):
        configuration = self.configuration
        test_state_path = configuration.state_path

        for config_key in _USERADM_CONFIG_DIR_KEYS:
            dir_path = getattr(configuration, config_key)[0:-1]
            try:
                shutil.rmtree(dir_path)
            except:
                pass

        self.expected_user_db_home = configuration.user_db_home[0:-1]
        self.expected_user_db_file = os.path.join(self.expected_user_db_home, 'MiG-users.db')

    def _provide_configuration(self):
        return 'testconfig'

    def test_argument_conversion(self):
        args = [
            "Test User",
            "Test Org",
            "NA",
            "DK",
            "user@example.com",
            "This is the create comment",
            "password"
        ]
        def _instrumented_main(*args, **kwargs):
            _instrumented_main.calls.append((args, kwargs))
            return None
        _instrumented_main.calls = []

        createuser_main(_instrumented_main, args, TEST_OUTPUT_DIR)

        self.assertEqual(len(_instrumented_main.calls), 1)
        thecall_args = _instrumented_main.calls[0][0]
        self.assertEqual(len(thecall_args), 2)
        maybe_argument_bundle = thecall_args[1]
        self.assertIsInstance(maybe_argument_bundle, ArgumentBundle)
        self.assertEqual(maybe_argument_bundle.name, 'UserArguments')

    def test_user_db_is_created_when_absent(self):
        bundle = _BUNDLE_DEFINITION(*[
            "Test User",
            "Test Org",
            "NA",
            "DK",
            "user@example.com",
            "This is the create comment",
            "password"
        ])
        print("")  # acount for output generated by the logic
        createuser(self.configuration, bundle, default_renew=True)

        # presence of user home
        path_kind = MigTestCase._absolute_path_kind(self.expected_user_db_home)
        self.assertEqual(path_kind, 'dir')

        # presence of user db
        expected_user_db_file = os.path.join(
            self.expected_user_db_home, 'MiG-users.db')
        path_kind = MigTestCase._absolute_path_kind(expected_user_db_file)
        self.assertEqual(path_kind, 'file')


    def test_user_entry_is_recorded(self):
        def _generate_salt():
            return b'CCCC12344321CCCC'

        expected_user_id = '/C=DK/ST=NA/L=NA/O=Test Org/OU=NA/CN=Test User/emailAddress=user@example.com'
        if PY2:
            expected_user_password_hash = 'PBKDF2$sha256$10000$CCCC12344321CCCC$bph8p/avUq42IYeOdJoJuUqrJ7Q32eaT'
        else:
            expected_user_password_hash = "PBKDF2$sha256$10000$b'CCCC12344321CCCC'$b'bph8p/avUq42IYeOdJoJuUqrJ7Q32eaT'"

        bundle = _BUNDLE_DEFINITION(*[
            "Test User",
            "Test Org",
            "NA",
            "DK",
            "user@example.com",
            "This is the create comment",
            "password"
        ])
        print("")  # acount for output generated by the logic

        createuser(self.configuration, bundle, default_renew=True,
            _generate_salt=_generate_salt)

        pickled = self.assertPickledFile(self.expected_user_db_file)
        self.assertIn(expected_user_id, pickled)
        actual_user_object = dict(pickled[expected_user_id])
        # TODO: remove resetting the handful of keys here done because changes
        #       to make them assertion frienfly values will increase the size
        #       of the diff which, at time of commit, are best minimised.
        actual_user_object['created'] = 9999999999.9999999
        actual_user_object['expire'] = 1234567890
        actual_user_object['unique_id'] = '__UNIQUE_ID__'

        self.assertEqual(actual_user_object, {
            'comment': "This is the create comment",
            'country': 'DK',
            'created': 9999999999.9999999,
            'distinguished_name': expected_user_id,
            'email': "user@example.com",
            'expire': 1234567890,
            'full_name': 'Test User',
            'locality': '',
            'openid_names': [],
            'organization': 'Test Org',
            'organizational_unit': '',
            "password": "",
            "password_hash": expected_user_password_hash,
            'state': 'NA',
            'unique_id': '__UNIQUE_ID__',
        })

    def test_missing_arguments(self):
        with self.assertRaises(ValueError) as raised:
            _BUNDLE_DEFINITION(*[
                "Test User",
                "Test Org",
                "NA",
                "DK",
                "user@example.com",
                "This is the create comment",
                #  leave off a password
            ])

        theexception = raised.exception
        self.assertEqual(str(theexception),
            "Error: too few arguments given (expected 7 got 6)")

if __name__ == '__main__':
    testmain()
